print('sfd')
sdfsdf
print('sdfsdfs')
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
setwd("E:/PROJECTpro/PROJECTS/Anomaly Detection/modular_code/src")
source("ML_Pipeline/packages.R")
source("ML_Pipeline/utils.R")
source("ML_Pipeline/data_prep.R")
source("ML_Pipeline/build_model.R")
source("ML_Pipeline/model_eval.R")
Req_Packages()
creditcard <- loadSourceData("../input/creditcard.csv")
creditcard <- preparaData(creditcard)
# Convert Data to H2oFrame
h2o.init()
creditcard_hf <- as.h2o(creditcard)
# Split Data
rtList <- splitData(creditcard_hf, ratios = c(0.4,0.4))
train_unsupervised <- rtList[[1]]
train_supervised <- rtList[[2]]
test <- rtList[[3]]
response <- "Class"
features <- setdiff(colnames(train_unsupervised), response)
# Build Unsupervised model with Auto Encoders
modelUnSup <- buildModel(features = features,trainData = train_unsupervised, hiddenUnits = c(10,2,10)
,enableAutoEncode=TRUE,model_name='modelUnSup')
# Get Reconstructed MSE score for each observation in training data
reconstructMSE <- getAnomalyScore(modelUnSup,train_unsupervised)
# Calculate threshold
threshold <- calculateThreshold(reconstructMSE$Reconstruction.MSE,0.994)
# Get Reconstructed MSE score for test data
testReconstructMSE <- getAnomalyScore(modelUnSup,test)
# Calculate and plot model performance
calculateMetricsUnSup(testReconstructMSE$Reconstruction.MSE,threshold,test)
